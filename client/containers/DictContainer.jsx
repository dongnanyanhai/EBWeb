import { connect } from "react-redux";
import {
  userConfigImport,
  userConfigExport,
  setUserConfigProfile,
  createUserConfigProfile,
  removeUserConfigProfile,
  notebookAnkiConnect,
  notebookAnkiDisconnect,
  notebookAnkiAutoSync,
  notebookAnkiSync,
  notebookPut,
  notebookEdit,
  suggestionsRequest,
  suggestionsClear,
  onChangeQ,
  onSearch,
  onLoadMore,
  selectDict,
  setSearchType,
  setRomaji,
  playSound,
  playSoundStart,
  playSoundEnd,
  playSoundError,
  toggleFurigana,
  analyze,
  closeAnalyze,
  netquery,
  closeNetquery,
  updateUserConfig,
  openShare,
  closeShare,
  goHome,
  set,
} from "../actions";
import { bindActionCreators } from "redux";
import Dict from "../components/Dict.jsx";
import {
  getDictNames,
  getMetaValues,
  getPageInfo,
  getWordIds,
  currentDictsSelector,
  searchDictsSelector,
} from "../selectors";

const mapStateToProps = (state) => {
  let metaValues = getMetaValues(state);
  return {
    googleUserInfo: metaValues.googleUserInfo,
    lastAnkiSyncTime: metaValues.lastAnkiSyncTime || 0,
    info: getPageInfo(state),
    local: state.local,
    page: state.page,
    offset: state.offset,
    q: state.q,
    sharing: state.sharing,
    drawQ: state.drawQ,
    drawStatus: state.drawStatus,
    drawSpeed: state.drawSpeed,
    kannjiDict: state.config.DICTINFO.kannjiDict,
    multiStyle: state.multiStyle,
    qChanged: state.qChanged,
    suggestions: state.suggestions,
    suggestionsQ: state.suggestionsQ,
    error: state.error,
    searchQ: state.searchQ,
    searchActualQ: state.searchActualQ,
    searchRomaji: state.searchRomaji,
    searchType: state.searchType,
    type: state.type,
    searching: state.searching,
    nextPageMarker: state.nextPageMarker,
    loadingMore: state.loadingMore,
    romaji: state.romaji,
    dict: state.dict,
    defaultDict:
      state.userConfig.defaultDict ||
      state.config.DEFAULTDICT ||
      state.dicts[0],
    currentDicts: currentDictsSelector(state),
    searchDict: state.searchDict,
    searchDicts: searchDictsSelector(state),
    dictNames: getDictNames(state),
    dicts: state.dicts,
    words: state.words,
    wordIds: getWordIds(state),
    wordNotes: state.notebook.wordNotes,
    ankiStatus: state.notebook.ankiStatus,
    playing: state.playing,
    playingSoundWordId: state.playingSoundWordId,
    multiShortcuts: state.config.DICTINFO.multiShortcuts || [],
    rootPath: state.config.ROOTPATH,
    publicUrl: state.config.PUBLIC_URL,
    furiganaEnable: state.config.FURIGANA_ENABLE,
    analyzeQ: state.analyzeQ,
    analyzeStatus: state.analyzeStatus,
    analyzeResult: state.analyzeResult,
    analyzeShowMore: state.analyzeShowMore,
    netqueryQ: state.netqueryQ,
    netqueryStatus: state.netqueryStatus,
    netqueryPin: state.netqueryPin,
    parserOpen: +!!state.parser.status,
    config: state.config,
    userConfig: state.userConfig,
    userConfigProfile: state.userConfigProfile,
    userConfigProfiles: state.userConfigProfiles,
  };
};

const mapDispatchToProps = (dispatch) => {
  return bindActionCreators(
    {
      setUserConfigProfile,
      createUserConfigProfile,
      removeUserConfigProfile,
      userConfigImport,
      userConfigExport,
      notebookAnkiConnect,
      notebookAnkiDisconnect,
      notebookAnkiAutoSync,
      notebookAnkiSync,
      notebookPut,
      notebookEdit,
      suggestionsRequest,
      suggestionsClear,
      onChangeQ,
      onSearch,
      onLoadMore,
      selectDict,
      setSearchType,
      setRomaji,
      playSound,
      playSoundStart,
      playSoundEnd,
      playSoundError,
      toggleFurigana,
      analyze,
      closeAnalyze,
      netquery,
      closeNetquery,
      updateUserConfig,
      openShare,
      closeShare,
      goHome,
      set,
    },
    dispatch
  );
};

const DictContainer = connect(mapStateToProps, mapDispatchToProps)(Dict);

export default DictContainer;
